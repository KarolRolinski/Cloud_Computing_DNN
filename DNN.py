# -*- coding: utf-8 -*-
"""UCI_3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xhHcBTAbRP-PsKZPcXYFzFBg_kHonMJR
"""

import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

from tensorflow import keras
from keras.regularizers import l2
from IPython.display import clear_output
from sklearn.model_selection import train_test_split
from google.colab import files
uploaded = files.upload()

import io
ds = pd.read_fwf(io.BytesIO(uploaded['data.txt']))
ds.columns = ["Lever_position", "Ship_Speed", "Turb_Shaft_Torque", "Turb_Rate", "Gen_Rate", 
              "Star_Prop_Torque", "Port_Prop_Torque", "HP_Turb_Temp", "Comp_In_Temp", "Comp_Out_Temp", 
              "HP_Turb_Exit_Pres", "Comp_In_Pres", "Comp_Out_Pres", "Turb_Exh_Pres", "Turb_Inj_Ctrl", 
              "Fuel", "Comp_decay_state", "Turb_decay_state"]

ds = ds.drop(columns = ["Lever_position", "Ship_Speed", "Comp_In_Temp", "Comp_In_Pres", "Star_Prop_Torque"]) 

y_comp = ds.pop("Comp_decay_state")
y_turb = ds.pop("Turb_decay_state")
ds_train, ds_test, yt_train, yt_test = train_test_split( ds, y_turb, test_size = 0.3, random_state = 0)

nc = ds_train.shape[1]

l_0 = tf.keras.layers.InputLayer(input_shape=(nc,))
l_1 = tf.keras.layers.Dense(units=8, kernel_regularizer=l2(0.001), bias_regularizer=l2(0.001), activation='relu')
l_2 = tf.keras.layers.Dense(units=1)


model = tf.keras.Sequential([l_0, l_1, l_2])
model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(learning_rate=0.0008))
model.fit(ds_train, yt_train, epochs=3000, batch_size= 12, verbose=0, validation_split=0.25, callbacks = [   
                        keras.callbacks.EarlyStopping(monitor='val_loss', patience=200),                                                        #min_delta=0, patience=200, verbose=1, mode='min'
                        keras.callbacks.ModelCheckpoint(filepath='path', monitor='val_loss', 
                                                        save_best_only=True, mode='min', verbose=1)])
          
y_pred = list(model.predict(ds_test))
yt_por = yt_test.reset_index(drop=True)

print(y_pred)

!mkdir -p dnn
save_path='./dnn/'
model.save_weights(os.path.join(save_path,"uci3_model_v2_weights.h5"), "w")
model_json=model.to_json()
with open(os.path.join(save_path,"uci3_model_v2.json"), "w") as json_file:
  json_file.write(model_json)